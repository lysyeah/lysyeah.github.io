{"pages":[{"title":"","text":"반복문 복습 for loop and while loop 123for i in range(3): #i는 임의의 변수 print(&quot;hello&quot;) print(&quot;안녕하세요&quot;) hello 안녕하세요 hello 안녕하세요 hello 안녕하세요 123456for i in range(1000): print(&quot;No : &quot;,i+1) #i는 임의의 변수 if i == 10: #1000번이 너무 많으니 중간에 break 걸어보자 break print(&quot;hello&quot;) print(&quot;안녕하세요&quot;) No : 1 hello 안녕하세요 No : 2 hello 안녕하세요 No : 3 hello 안녕하세요 No : 4 hello 안녕하세요 No : 5 hello 안녕하세요 No : 6 hello 안녕하세요 No : 7 hello 안녕하세요 No : 8 hello 안녕하세요 No : 9 hello 안녕하세요 No : 10 hello 안녕하세요 No : 11 12345&quot;K&quot; in &quot;Kaggle&quot;if &quot;K&quot; == &quot;a&quot;: print(&quot;출력이 되나요?&quot;)else: print(&quot;출력이 안된듯&quot;) 출력이 안된듯 123456a = &quot;Kaggle&quot;for i in a: print(i) if i == &quot;a&quot;: break K a 리스트의 값이 존재 전체 총합 구하 12345678910numbers = [1,2,3,4,5]sum = 0for num in numbers: print(&quot;numbers:&quot; , num) sum = sum + num print(&quot;total: &quot;, sum)print(&quot;---최종 결과값---&quot;)print(sum) numbers: 1 total: 1 numbers: 2 total: 3 numbers: 3 total: 6 numbers: 4 total: 10 numbers: 5 total: 15 ---최종 결과값--- 15 12345678910111213fruits = ['apple', 'kiwi', 'mango']newlist = [ ]# apple 에 a가 있나요? 있네요. newlist에 추가하세요.# kiwi 에 a가 있나요? 없네요. 그럼 넘어가요.# mango 에 a가 있나요? 있네요. newlist에 추가하세요.for fruit in fruits: print(&quot;조건문 밖 : &quot;, fruit) if &quot;a&quot; in fruit: print(&quot;조건문 안 :&quot;, fruit) ##중간중간에 print 해서 잘되고 있나 확인하기. newlist. append(fruit)print(newlist) 조건문 밖 : apple 조건문 안 : apple 조건문 밖 : kiwi 조건문 밖 : mango 조건문 안 : mango ['apple', 'mango'] while loop : 분석할 때 쓸 일이 거의 없다. 자동사냥처럼 범위가 정해지지 않은 경우 while을 주로 쓴다. 자동사냥 버튼을 끌 때까지 계속 해라. 123456i = 1while i &lt; 10: #참일때만 반복문 코드가 돎 print(i) i += 1 # 1씩 증가#i -=1 # 1씩 감소 1 2 3 4 5 6 7 8 9 사용자 정의 함수 내가 필요에 의해 직접 함수를 작성 123def 함수명(param1, param2): #코드 return None 12345def add(a = 0 , b = 1): c = a + b return c # = return a+bprint(add(a=5, b=4))print(add()) 9 1 사칙 연산 사용자 정의 함수 만들기 함수 문서화 키워드 : docstring #좋은 회사일수록 문서화를 중요시한다. 1234567891011121314151617def subtraction(a,b): &quot;&quot;&quot; a, b를 빼는 함수 parameters: a(int) : int형 숫자 a가 입력 b(int) : int형 숫자 b가 입력 return: int : 반환값&quot;&quot;&quot; return a-bprint(subtraction(a=5, b=2))#### 중요하다. #### #### 좋은 회사 가려면 문서화 꼭 하자. 1000명 중 한 두명 한다. #### 3 12345def Multiplication(a=0, b=1): c = a * b return cprint(Multiplication(a=2,b=3))print(Multiplication()) 6 0 12345def main(a=5, b=3): c = a-b return cprint(main(a=8,b=2))print(main()) 6 2 12345def Liberty(a=2, b=8): c = b/a return cprint(Liberty(a=2,b=10))print(Liberty()) 5.0 4.0 123def subtraction(a,b): return a**bprint(subtraction(a=10,b=3)) 1000 12345678910111213141516def remain(a,b,c): return a%b+cprint(remain(a=19,b=4,c=6)) &quot;&quot;&quot; a 나누기 b 의 나머지에 c를 더하는 함수 parameters: a(int) : int형 숫자 a가 입력 b(int) : int형 숫자 b가 입력 c(int) : int형 숫자 c가 입력 return: int : 반환값&quot;&quot;&quot; 9 NumPy 문법 소개 내장 모듈 (= 라이브러리 = 패키지) # 파이썬에서 라이브러리라고 주로 표현 한다(X) 별도 라이브러리 설치 필요함. 12import numpy as np #버전 확인하기print(np.__version__) 1.21.6 12import numpyprint(numpy.__version__) 1.21.6 12345temp = [1,2,3]temp_array = np.array(temp) #리스트에서 배열로 변환하기.print(type(temp))print(type(temp_array)) &lt;class 'list'&gt; &lt;class 'numpy.ndarray'&gt; 사칙연산1# 코드로 형식 지정됨 12345678910111213math_score = [90, 80,70]eng_score = [100,50,80]math_score + eng_scoremath_score = np.array(math_score)eng_score = np.array(eng_score)total = math_score + eng_scoreprint(total)print(type(total)) [190 130 150] &lt;class 'numpy.ndarray'&gt; 집계함수 123print(np.min(total))print(np.max(total))print(np.sum(total)) 130 190 470 차원 확인 배열 차원 확인이 필요함 1234# 1차원 배열temp_arr = np.array([1,2,3])print(temp_arr.shape)print(temp_arr.ndim) (3,) 1 12345# 2차원 배열temp_arr = np.array([[1,2,3],[4,5,6]])print(temp_arr.shape)print(temp_arr.ndim)print(temp_arr) (2, 3) 2 [[1 2 3] [4 5 6]] 123456789# 3차원 배열 = 이미지 파일temp_arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])print(temp_arr.shape)print(temp_arr.ndim)print(temp_arr)#[[1, 2, 3], [4, 5, 6]]= 하나 // [[7, 8, 9], [10, 11, 12]]= 둘 첫번째 숫자#[1, 2, 3]=하나, [4, 5, 6]=둘 # 첫번째 숫자 안에 있는 []의 갯수#[1, 2, 3] =셋 안에 있는 숫자 갯수 (2, 2, 3) 3 [[[ 1 2 3] [ 4 5 6]] [[ 7 8 9] [10 11 12]]] 파이썬 인터프리터 종류 파이썬 버전이 매우 많음 웹 개발 : 파이썬 3.7버전 머신 러닝 : 파이썬 3.8버전 GUI : 파이썬 3.9 버전 버전에 따라서 패키지를 다운로드를 더할 필요가 있다. 아나콘다에서는 numpy가 1.21.0 버전 파이썬 virtualenv에서는 numpy가 1.23.0 버전##이로써 Which python으로 현재 내 파이썬이 참조하는 경로찾기.##파이썬으로 venv를 만들고 접속하기 = source venv/scripts/activate which python 경로가 어디지? python temp.pysource venv/scripts/activate 이거 할 때 탭 눌러서 완성하기. which python 설정했으니 확인해보자. deactivatewhich python배열 생성의 다양한 방법들 모두 0으로 채운다. 12import numpy as npprint(np.__version__) 1.21.6 12temp_arr = np.zeros((3, 2, 3)) ###숫자 바꾸면서 어떻게 달라지는지 보기temp_arr array([[[0., 0., 0.], [0., 0., 0.]], [[0., 0., 0.], [0., 0., 0.]], [[0., 0., 0.], [0., 0., 0.]]]) 12temp_arr = np.ones((2,3))temp_arr array([[1., 1., 1.], [1., 1., 1.]]) 임의의 상수값으로 채운다. 12temp_arr = np.full((3,3),5) ###이렇게 하는 방법도 있다.temp_arr array([[5, 5, 5], [5, 5, 5], [5, 5, 5]]) 최소, 최대 숫자의 범위를 정하고, 각 구간 별로 값을 생성한다. 12temp_arr = np.linspace(5, 10, 10) #5와 10사이의 숫자를 10개 값 생성temp_arr array([ 5. , 5.55555556, 6.11111111, 6.66666667, 7.22222222, 7.77777778, 8.33333333, 8.88888889, 9.44444444, 10. ]) 반복문 시, 자주 등장하는 배 12temp_arr = np. arange(1, 11, 1) ## 1부터 11미만까지 1커지는 숫자로 나열하기. ##아 이런 methods들이 있구나 하고 넘어가기.temp_arr array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) 난수 생성하기. 1234from numpy import random ##코딩도장에서 패키지 만들기에 있다. from square import 머시기 있음.x = random.rand()print(x) 0.2234016171962998 123import numpyx = numpy.random.rand()print(x) ##바로 뒤에 있는 것과 같은 것이다. 0.5932025329031522 랜덤 정수값 추출 12345from numpy import random# x= random.randint(100, size = 5)x = random.randint(100, size = (3,5)) #두가지방법 둘다 복습해보기.print(x)print(type(x)) [[20 97 7 19 67] [72 25 9 32 43] [57 47 53 65 41]] &lt;class 'numpy.ndarray'&gt; 1234from numpy import randomx = random.rand(2,5)print(x)print(type(x)) [[0.16366456 0.48662476 0.47091867 0.1707638 0.43509512] [0.23800188 0.66701242 0.17376954 0.04608532 0.12255199]] &lt;class 'numpy.ndarray'&gt; numpy 사칙연123import numpy as uparray_01 = np.array([1,2,3])array_02 = np.array([10,20,30]) 123456789101112131415161718192021# 덧셈newArr = np.add(array_01, array_02)print(newArr)# 빼기newArr = np.subtract(array_01, array_02)print(newArr)# 곱하기newArr = np.multiply(array_01, array_02)print(newArr)# 나누기newArr = np.divide(array_01, array_02)print(newArr)# 거듭제곱array_01 = np.array([1,2,3])array_02 = np.array([2,4,3])newArr = np.power(array_01,array_02)print(newArr) [3 6 6] [-1 -2 0] [2 8 9] [0.5 0.5 1. ] [ 1 16 27] 소숫점 정령 소숫점을 정렬하는 여러가지 방법 1234567# 소숫점 제거하기import numpy as nptemp_arr = np.trunc([-1.23, 1.23])print(temp_arr)temp_arr = np.fix([-1.23,1.23])print(temp_arr) [-1. 1.] [-1. 1.] 123# 임의의 소숫점 자리에서 반올림temp_arr = np.around([-1.535433, 1.24333],3)print(temp_arr) [-1.535 1.243] 123# 소숫점 모두 내리기temp_arr = np.floor([-1.535433, 1.24333])print(temp_arr) [-2. 1.] 123# 소숫점 모두 올리기temp_arr = np.ceil([-1.535433, 1.24333])print(temp_arr) [-1. 2.] 조건식 pandas 가공 numpy 조건식 하나의 조건식 다중 조건식 12temp_arr = np.arange(10)temp_arr array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 1234# 5보다 작으면 원값을 유지한다.# 5보다 크면 곱하기 10을 한다.#np.where(조건식, 참일때, 거짓일때)np.where(temp_arr &lt;= 5, temp_arr, temp_arr * 10) array([ 0, 1, 2, 3, 4, 5, 60, 70, 80, 90]) 123456789temp_arr = np.arange(10)# temp_arrcond_list = [temp_arr &gt;5, temp_arr&lt;2] # cond : condition(=조건)choice_list = [temp_arr*2, temp_arr +100] # np.select(조건식 리스트, 결과값 리스트, default = 값)np.select(cond_list, choice_list, default = temp_arr)#### 정말 많이 쓰는 함수이다. 잘 알아 놓자 ####### np.where 과 np.select 차이점 구글링 해보기. ### array([100, 101, 2, 3, 4, 5, 12, 14, 16, 18]) reshape 배열의 차원 또는 크기를 바꾼다. 전제조건 : 곱셈만 할줄 알면 적용하기 쉽다. 1234import numpy as nptemp_array = np.ones((3,4))print(temp_array.shape)print(temp_array) (3, 4) [[1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.]] 123after_reshape = temp_array.reshape(2,2,3) #괄호 안에 숫자를 모두 곱했을 때 12가 되어야 에러가 뜨지 않는다.print(after_reshape.shape)print(after_reshape) (2, 2, 3) [[[1. 1. 1.] [1. 1. 1.]] [[1. 1. 1.] [1. 1. 1.]]] 123after_reshape = temp_array.reshape(2,2, -1) # 2 곱하기 2 후에 숫자 하나를 더 곱해야 하는데 몇을 곱할지 모를 때 print(after_reshape.shape) # -1을 입력하면 알아서 결과값을 찾아서 넣는다.print(after_reshape) (2, 2, 3) [[[1. 1. 1.] [1. 1. 1.]] [[1. 1. 1.] [1. 1. 1.]]] 브로드 캐스팅 array broadcasting in numpy 정의 및 어떤 기능인지만 알자. 깊게 알려면 배울게 너무 많아서 너무 오래 걸릴 수 있다. 강사님이 올려주신 파일 중에, 다운로드하라고 했던 파일 안에 PDF 안에 있음. Pandas Tutorial12import pandas as pdprint(pd.__version__) 1.3.5 12345678910temp_dict = { 'col1' : [1,2], 'col2' : [3,4]}df = pd.DataFrame(temp_dict)print(df)print(type(df))## 프로그래밍은 테스트를 꼭하고 잘 작동하면 올리기. col1 col2 0 1 3 1 2 4 &lt;class 'pandas.core.frame.DataFrame'&gt; 구글 드라이브 연동12from google.colab import drivedrive.mount('/content/drive') Mounted at /content/drive 12345DATA_PATH = '/content/drive/MyDrive/Colab Notebooks/Human_AI/Basic/Chapter 3. pandas/data'print(DATA_PATH + 'Lemonade2016.csv')#lemonade = pd.read_csv(DATA_PATH + 'Lemonade2016.csv')#covid_df = pd.read_csv(DATA_PATH + 'owid-covid-data') /content/drive/MyDrive/Colab Notebooks/Human_AI/Basic/Chapter 3. pandas/dataLemonade2016.csv 123#경로 문제.#86번에서 1번에서 3. pandas/data 다음에 /을 해줘야 #hapter 3. pandas/data/Lemonade2016.csv 로 나온다. 1234567DATA_PATH = '/content/drive/MyDrive/Colab Notebooks/Human_AI/Basic/Chapter 3. pandas/data/'print(DATA_PATH + 'Lemonade2016.csv')lemonade = pd.read_csv(DATA_PATH + 'Lemonade2016.csv')#covid_df = pd.read_csv(DATA_PATH + 'owid-covid-data')lemonade.info() #str() 이랑 같은 함수이다. /content/drive/MyDrive/Colab Notebooks/Human_AI/Basic/Chapter 3. pandas/data/Lemonade2016.csv &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 32 entries, 0 to 31 Data columns (total 7 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Date 31 non-null object 1 Location 32 non-null object 2 Lemon 32 non-null int64 3 Orange 32 non-null int64 4 Temperature 32 non-null int64 5 Leaflets 31 non-null float64 6 Price 32 non-null float64 dtypes: float64(2), int64(3), object(2) memory usage: 1.9+ KB","link":"/day0628.html"}],"posts":[{"title":"HEllo, Making a blog is..","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment f04j9f8sliomj1$ 가나다라마바사 More info: 가나다 alphabet $ ABCDEFG fdsfdsfsdf","link":"/2022/06/17/hello-world/"},{"title":"Day-1 virtualization","text":"R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: 1summary(cars) 1234567## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 Including PlotsYou can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. ggplot2 시각화 다음과 같이 시각화를 작성한다. 1234library(ggplot2)ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()","link":"/2022/06/17/dat0617/"},{"title":"test","text":"csv 파일 불러오기-csv 파일을 불러옵니다. 12mpg1&lt;- read.csv(&quot;mpg1.csv&quot;)str(mpg1) 123456## 'data.frame': 234 obs. of 5 variables:## $ manufacturer: chr &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; ...## $ trans : chr &quot;auto&quot; &quot;manual&quot; &quot;manual&quot; &quot;auto&quot; ...## $ drv : chr &quot;f&quot; &quot;f&quot; &quot;f&quot; &quot;f&quot; ...## $ cty : int 18 21 20 21 16 18 18 18 16 20 ...## $ hwy : int 29 29 31 30 26 26 27 26 25 28 ... #데이터 시각화 하기-cty, hwy 산점도를 그려본다. 1234library(ggplot2)ggplot(mpg1, aes(x=cty, y=hwy))+geom_point()","link":"/2022/06/20/test/"},{"title":"Python 기초문법","text":"Hello world 1print(&quot;Hello world&quot;) Hello world 주석처리 1줄 주석, 여러줄 주석 처리 여러 줄 주석 처리 함수 또는 클래스를 문서화 할 때 주로 사용 프로젝트 할 때 전체 공정 100 코드 / 코드 문서화 / 한글 작업 문서화 코드 문서화가 가장 어렵다. 12345678910# print() 함수 사용print(&quot;1줄 주석&quot;)&quot;&quot;&quot;여러 줄 주석쌍따옴표 3개를 입력해주세요앞과 뒤로 &quot;&quot;&quot;print(&quot;여러 줄 주석&quot;) 1줄 주석 여러 줄 주석 변수 (Scalar) 자료형 Scalar형 Non-Scalar형 수치형 자료형 int, float 1234num_int = 1print(num_int)print(type(num_int)) 1 &lt;class 'int'&gt; 123num_float = 0.1print(num_float)print(type(num_float)) 0.1 &lt;class 'float'&gt; Bool형 True, False R에선 모든 대문자: TRUE, FALSE 123bool_true = Trueprint(bool_true)print(type(bool_true)) True &lt;class 'bool'&gt; None 자료 Null값, 값이 정해지지 않은 자료형 123none_x = Noneprint(none_x)print(type(none_x)) None &lt;class 'NoneType'&gt; 사칙연산 정수형 사칙연산, 실수형 사칙연상 결괏값의 자료형 정수형 사칙연산123a = 3b = 2print('a + b =', a+b) a + b = 5 실수형 사칙연산123a = 1.5b = 2.5print('a + b = ', a+b) a + b = 4.0 123456a = 3.3b = 6.4print('a + b = ', a+b )print('a - b = ', a-b )print('a*b = ', a*b)print('a/b=', a/b) a + b = 9.7 a - b = -3.1000000000000005 a*b = 21.12 a/b= 0.5156249999999999 논리형 연산자 Bool형 True와 False값으로 정의 조건식 교집합(=and), 합집합(=or) 1234print(True and True)print(True and False)print(False and True)print(False and False) True False False False 1234print(True or True)print(True or False)print(False or True)print(False or False) True True True False 비교 연산자 비교 연산자는 부등호를 의미한다. 12345print(4&gt;3) #참 = Trueprint(4&lt;3) #거짓 = Falseprint(4&gt;3 and 4&lt;3)print(4&gt;3 or 4&lt;3) True False False True 논리형 &amp; 비교 연산자 응용 input() 형변환 데이터 타입을 변경하는 것 123var = int(input(&quot;숫자를 입력하세요..!&quot;))print(var)print(type(var)) 숫자를 입력하세요..!1 1 &lt;class 'int'&gt; 1234num1 = int(input(&quot;첫번째 숫자를 입력하세요..!&quot;))num2 = int(input(&quot;두번째 숫자를 입력하세요..!&quot;))num3 = int(input(&quot;세번째 숫자를 입력하세요..!&quot;))num4 = int(input(&quot;네번째 숫자를 입력하세요..!&quot;)) 첫번째 숫자를 입력하세요..!1 두번째 숫자를 입력하세요..!2 세번째 숫자를 입력하세요..!3 네번째 숫자를 입력하세요..!4 12var1 = num1 &gt;= num2 #Falsevar2 = num3 &lt; num4 #True 12print(var1 and var2)print(var1 or var2) False True String Non-Scalar 123456print('Hello world')print(&quot;Hello world&quot;)print(&quot;'Hello world'&quot;)print('&quot;Hello world&quot;') Hello world Hello world 'Hello world' &quot;Hello world&quot; String Operator 문자열 연산자 +, * 만 가능하다. 123str1 = &quot;Hello &quot;str2 = &quot;World &quot;print(str1 + str2) Hello World 12greet = str1 + str2print(greet *8) Hello World Hello World Hello World Hello World Hello World Hello World Hello World Hello World 12a = &quot;Pyhone&quot;a 'Pyhone' 조건문 if123a = 3if a &gt; 1: print (&quot;a is greater than 1&quot;) #if a &gt; 1: 다음 문장은 Tab으로 들여쓰기를 해야한다. a is greater than 1 반복문 for123a = &quot;Pthon&quot;for a in [1,2,4]: print(a) 1 2 4 반복문 while1234i = 0while i &lt; 3: i = i++1 print(i) 1 2 3 함수1234def add(a, b): return a+b add(3,4) 7 ##8진수와 16진수 #진수는잘쓰이진 않음 123a = 0o177 #8진수b = 0xABCprint(a,b) 127 2748 사칙연산123a = 3b = 4a ** b 81 나눗셈 후 나머지를 반환하는 % 연산자17 % 3 1 13%7 3 나눗셈 후 몫을 반환하는 //연산자 17 //4 1 문자열에 작은 따옴표 (‘’)포함시키기 12food = &quot;Pyhon's favorite food is perl&quot; #''로 하면 오류가 발생한다.food &quot;Pyhon's favorite food is perl&quot; 1 문자열 인덱싱 인덱싱은 0 번째부터 시작 12345greeting = &quot;Hello Kaggle&quot;i = 7print(greeting[i]) # 이렇게 하는 것이 빈번하다. 제대로 된 것인지 확인할 때 쓴다print(greeting)print(greeting[4]) a Hello Kaggle o 123greeting = &quot;Hello Kaggle&quot;i = int(input(&quot;숫자를 입력하세요...!&quot;))print(greeting[i]) 숫자를 입력하세요...!2 l ##슬라이싱 123456789greeting = &quot;Hello Kaggle&quot;# print(greeting[시작인덱스:끝인덱스-1])print(greeting[0:8])print(greeting[:8])print(greeting[6:])print(greeting[0:10:2])print(greeting[0:10:3])print(greeting[0:10:4]) Hello Ka Hello Ka Kaggle HloKg HlKg Hog 12alphabet_letter = &quot;abcdefghijklmnopqrstuvwxyz &quot;print(alphabet_letter[0::2]) acegikmoqsuwy 12greeting = &quot;Hello Kaggle&quot;print(greeting[100]) --------------------------------------------------------------------------- IndexError Traceback (most recent call last) &lt;ipython-input-104-128f57967a72&gt; in &lt;module&gt;() 1 greeting = &quot;Hello Kaggle&quot; ----&gt; 2 print(greeting[100]) IndexError: string index out of range 12greeting = &quot;Hello Kaggle&quot;print(greeting[11]) e 문자열 관련 메소드 split() srt() etc 리스트 []로 표시. [item1, item2, item3] 123456a = [] # 빈 리스트a = function = list # 빈 리스트 생성b = [1] # 숫자 요소c = ['apple'] # 문자 요소d = [1, 2, ['aplpe'],'apple']print(d) [1, 2, ['aplpe'], 'apple'] 리스트 값 수정하기 리스트 값 수정 123a = [0,1,2]a[1] = &quot;이용수&quot;print(a) [0, '이용수', 2] 리스트 값 추가하기 메소드 사용 123456a = [100,200,300]a.append(400) #a = a.append(400) 이렇게 하지 않고 바로 a.append로 한다. print(a)a.append([500,600])print(a) [100, 200, 300, 400] [100, 200, 300, 400, [500, 600]] 1234567a = [100,200,300]a.append(400) #하나의 값만 넣고 싶을 때print(a)a.extend([400,500]) # 여러 값을 넣고 싶을 때print(a) [100, 200, 300, 400] [100, 200, 300, 400, 400, 500] insert(인덱스 특정 위치에 값을 넣기)123a = [100,200,300]a.insert(0,50)print(a) [50, 100, 200, 300] 리스트 값 삭제하기 remove, del 123456a = [1,2,1,2]a.remove(1)print(a) # 첫번째 등장하는 1을 삭제한다a.remove(10) [2, 1, 2] --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &lt;ipython-input-118-90e7fa84a5d0&gt; in &lt;module&gt;() 4 print(a) # 첫번째 등장하는 1을 삭제한다 5 ----&gt; 6 a.remove(10) ValueError: list.remove(x): x not in list 1234567a = [1,2,1,2,10]a.remove(1)print(a) # 첫번째 등장하는 1을 삭제한다a.remove(10)print(a) [2, 1, 2, 10] [2, 1, 2] +del 123456a = [0,1,2,3,4]del a[1]print(a)del a[:2]print(a) [0, 2, 3, 4] [3, 4] 문자열, 리스트 내장함수를 익히는 것이 포인트!! pop() 12345678a = [1,2,3,4,5]rem = a.pop(1)x = a.pop() # 마지막값 출력print(a)print(rem)print(x) [1, 3, 4] 2 5 clear() : 리스트 내 모든 값 삭제 index(“값”) : 값의 위치를 불러오기(찾기) 1234a = [1,4,5,2,3]b = [&quot;철수&quot;, &quot;영희&quot;, &quot;길동&quot;]print(a.index(4))print(b.index(&quot;길동&quot;)) 1 2 sort : 리스트의 정렬 1234567a = [1,4,5,2,3]a.sort()print(a)a.sort(reverse=True)print(a)help(list.sort)help(list.index) [1, 2, 3, 4, 5] [5, 4, 3, 2, 1] Help on method_descriptor: sort(self, /, *, key=None, reverse=False) Stable sort *IN PLACE*. Help on method_descriptor: index(self, value, start=0, stop=9223372036854775807, /) Return first index of value. Raises ValueError if the value is not present. 튜플 면접 질문 : 리스트와 튜플의 차이는 무엇인가? list : [] 수정, 삭제, 추가 튜플 : () 다 안됨 12345678910tuple1 = (0)tuple2 = (0, )tuple3 = 0, 1, 2print(type(tuple1))print(type(tuple2))print(type(tuple3)) #콤마가 있으냐 없느냐에 따라서 인트인지 튜플인지 구분된다.print(tuple1) # 그냥 숫자가 프린트된다.print(tuple2)print(tuple3) &lt;class 'int'&gt; &lt;class 'tuple'&gt; &lt;class 'tuple'&gt; 0 (0,) (0, 1, 2) 12a = (0,1,2,3,&quot;a&quot;)del a [4] --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-146-dbd44eb80870&gt; in &lt;module&gt;() 1 a = (0,1,2,3,&quot;a&quot;) ----&gt; 2 del a [4] TypeError: 'tuple' object doesn't support item deletion 123a = [0,1,2,3,&quot;a&quot;] #()로 하면 에러뜬다.a[4] = 4print(a) [0, 1, 2, 3, 4] 튜플(리스트도 포함) 연산자 문자열 연산자 +, * 1234t1 = [0,1,2] # []로 하든 ()로 하든 동일한 결과값이 나온다.t2 = [3,4,5]print(t1+t2)print(t1*t2) [0, 1, 2, 3, 4, 5] --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-150-2bab607964b9&gt; in &lt;module&gt;() 2 t2 = [3,4,5] 3 print(t1+t2) ----&gt; 4 print(t1*t2) TypeError: can't multiply sequence by non-int of type 'list' dictionary keys와 value로 구성됨 cf) 슬라이싱 : 데이터에 순서가 존재해야한다.. 순서라는 개념 자체가 존재하지 않음 123456789101112temp_dict = { 'teacher' : 'evan', 'class' : 15, 'students' : ['s1', 's2', 's3']}print(temp_dict[&quot;teacher&quot;])print(temp_dict[&quot;class&quot;])print(temp_dict[&quot;students&quot;])print(temp_dict[&quot;A&quot;]) evan 15 ['s1', 's2', 's3'] --------------------------------------------------------------------------- KeyError Traceback (most recent call last) &lt;ipython-input-165-8ddb924c1f32&gt; in &lt;module&gt;() 9 print(temp_dict[&quot;class&quot;]) 10 print(temp_dict[&quot;students&quot;]) ---&gt; 11 print(temp_dict[&quot;A&quot;]) KeyError: 'A' keys()값만 출력 12list(temp_dict.keys()) ['teacher', 'class', 'students'] value() 값만 출력 1temp_dict.values() dict_values(['evan', 15, ['s1', 's2', 's3']]) item() key-values 쌍으로, list와 tuple 형태로 변환 가능하다. 1temp_dict.items() dict_items([('teacher', 'evan'), ('class', 15), ('students', ['s1', 's2', 's3'])]) 조건문 12345678910a = -5if a &gt; 5: print(&quot;a는 5보다 크다&quot;)elif a &gt; 0: print(&quot;a는 0보다 크다 &quot;)elif a &gt; -5: print(&quot;a는 -5보다 크다&quot;)else: print(&quot;a는 매우 작다&quot;) # 조건문이 만족하는 것만 출력된다. a는 매우 작다 반복문1234### Hello world 1,000,000번 출력하세요for i in range(7): # 여기서 i는 그냥 변수 print(i+1) print(&quot;Hello world&quot;) 1 Hello world 2 Hello world 3 Hello world 4 Hello world 5 Hello world 6 Hello world 7 Hello world 123### Hello world 1,000,000번 출력하세요for i in range(5): # 여기서 i는 그냥 변수. 아무거나 넣어도 됌 print(i+1,&quot;Hello world&quot;) 1 Hello world 2 Hello world 3 Hello world 4 Hello world 5 Hello world for loop if 조건문 사용 문자열 리스트 등 –&gt; 시퀀스 데이터 123456a = &quot;Kaggle&quot;# g 가 시작하면 반복문을 멈추세요for x in a: print(x) if x == 'g': break K a g 12345678a = &quot;Kaggle&quot;# g 가 시작하면 반복문을 멈추세요for x in a: if x == 'g': break print(x) # print(x) 의 위치에 따라 결과값이 달라지네?? K a enumerate() 1234alphabets = ['a', 'b', 'c']for i, value in enumerate(alphabets): print(i, value) 0 a 1 b 2 c 리스 컴프리헨션list comprehension #반복문을 한줄로 표시한다 12345678fruits = ['apple', 'kiwi', 'mango']newlists = []# 알파벳 a가 있는 과일만 추출 후, 새로운 리스트에 담기for fruit in fruits: if &quot;a&quot; in fruit: newlists.append(fruit)print(newlists) # 너무 복잡하네... ['apple', 'mango'] 123# 리스트 컴프리헨션newlist = [fruit for fruit in fruits if 'a' in fruit] print(newlist) ['apple', 'mango'] 줄을 바꾸기 위한 이스케이프 코드 \\n 삽입하기 12multiline = &quot;Life is too short \\nYou need python &quot;print(multiline) Life is too short You need python 12345multiline=&quot;&quot;&quot;Life is too shortYou need python&quot;&quot;&quot;print(multiline) Life is too short You need python \\n : 문자열 안에서 줄을 바꿀 때 사용\\t : 문자열 사이에 탭 간격을 줄 때 사용\\ : 문자\\를 그대로 표현할 때 사용' : 작음따옴표(‘)를 그대로 표현할 때 사용&quot; : 큰따옴표(“)를 그대로 표현할 때 사용 12a = &quot;abcde\\nfg&quot;print(a) abcde fg 12a = &quot;abcd\\fefg&quot;print(a) abcd efg 12a = &quot;abcdef\\'g\\'&quot;print(a) abcdef'g' 12a = &quot;abcdef\\&quot;g\\&quot;&quot;print(a) abcdef&quot;g&quot; 123head = &quot;Python&quot;tail = &quot;is fun&quot;head + tail 'Pythonis fun' 12a = &quot;fun&quot;a*2 'funfun' 문자열 곱하기를 좀 더 응용해 보자. 다음 소스를 IDLE 에디터를 열고 작성해 보자. multistring.pyprint(“=” * 50)print(“My Program”)print(“=” * 50)입력한 소스는 C:\\doit 디렉터리에 파일 이름 multistring.py로 저장하자. 이제 프로그램을 실행해 보자. [윈도우 + R(실행) → cmd 입력 → Enter]를 눌러 명령 프롬프트 창을 열고 다음을 따라 해 보자. 결괏값이 다음과 같이 나타날 것이다. C:\\Users&gt;cd C:\\doitC:\\doit&gt;python multistring.py==================================================My Program==================================================이런 식의 표현은 앞으로 자주 사용하게 될 것이다. 프로그램을 만들어 실행시켰을 때 출력되는 화면 제일 위쪽에 프로그램 제목을 이와 같이 표시하면 보기 좋지 않겠는가? 12a = &quot;0123456789101112&quot;len(a) 16 12a = &quot;12345678910&quot;a[9:11] # 인덱스가 되어있기 때문에 10을 표현하려면 슬라이싱으로 표현해야한다. '10'","link":"/2022/06/27/day0627%20(1)/"}],"tags":[],"categories":[]}